<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="lc">
	
	<resultMap type="LC_003_1_VO" id="lc_getResult">
		<result property="lc_index" column="lc_index"/>
		<result property="m_index" column="m_index"/>
		<result property="lc_title" column="lc_title"/>
		<result property="lc_type" column="lc_type"/>
		<result property="lc_distance" column="lc_distance"/>
		<result property="lc_run" column="lc_run"/>
		<result property="lc_cycle" column="lc_cycle"/>
		<result property="lc_area1" column="lc_area1"/>
		<result property="lc_area2" column="lc_area2"/>
		<result property="lc_area3" column="lc_area3"/>
		<result property="lc_text" column="lc_text" jdbcType="CLOB" javaType="java.lang.String"/>
		<result property="lc_date" column="lc_date"/>
		<result property="lc_good" column="lc_good"/>
		<result property="lc_see" column="lc_see"/>
		<result property="lc_record" column="lc_record"/>
		<result property="lc_address" column="lc_address"/>
		<result property="lc_xy_arr" column="lc_xy_arr" jdbcType="CLOB" javaType="java.lang.String"/>
		<result property="m_nickname" column="m_nickname"/>
	</resultMap>
	
	<resultMap id="clobMap" type="java.util.HashMap">
		<result property="lc_thumbnail" column="lc_thumbnail" javaType="[B" jdbcType="BLOB"  />
	</resultMap>
	
	<!-- 카테고리별 검색하기 -->
	<sql id="criteria" >
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
				<foreach item="type" collection="typeArr">
					<trim prefix="OR">
						<choose>
							<when test = "type == 'normal'.toString()">
								lc_title like '%'||#{keyword}||'%') or (m_index like '%'||#{keyword}||'%'
							</when>
							<when test = "type == 'area'.toString()">
								lc_area1 like '%'||#{keyword}||'%') or (lc_area2 like '%'||#{keyword}||'%') or
								(lc_area3 like '%'||#{keyword}||'%'
							</when>
						</choose>
					</trim>
				</foreach>
			</trim>
	</sql>
	
	 <!-- 타입별 검색하기 -->
	 <sql id="type_match" >
		<trim prefix="AND (" suffix=")" prefixOverrides="OR">
					<trim prefix="OR">
						<choose>
							<when test = "lc_type == '육상'">
								lc_type like '%'||#{lc_type}||'%'
							</when>
							<when test = "lc_type == '자전거'">
								lc_type like '%'||#{lc_type}||'%'
							</when>
						</choose>
					</trim>
			</trim>
	</sql> 
	
	
	<!-- 리스트 뽑아오기 -->
	<select id="LC_002_01" resultType="vs.lc.lc_002_1.vo.LC_002_1_VO">
		<![CDATA[
			select lc_index, m_index, lc_title, lc_type, lc_distance, lc_run, lc_cycle,
						 lc_area1, lc_area2, lc_area3, lc_thumbnail, lc_text, lc_date, lc_good, lc_see, lc_record, m_nickname
			from
				(
					select /*+INDEX_DESC(course lc_index) */
						rownum rn, c.lc_index, c.m_index, c.lc_title, c.lc_type, c.lc_distance, c.lc_run, c.lc_cycle,
						 c.lc_area1, c.lc_area2, c.lc_area3, c.lc_thumbnail, c.lc_text, c.lc_date, c.lc_good, c.lc_see, c.lc_record, m.m_nickname
					from
						course c join member m
					on
						m.m_index = c.m_index
					where
		]]>	
		
			<trim prefix="(" suffix=") AND " prefixOverrides="OR">
				<foreach item="type" collection="typeArr">
					<trim prefix="OR">
						<choose>
							<when test = "type == 'normal'.toString()">
								lc_title like '%'||#{keyword}||'%') or (m_nickname like '%'||#{keyword}||'%'
							</when>
							<when test = "type == 'area'.toString()">
								lc_area1 like '%'||#{keyword}||'%') or (lc_area2 like '%'||#{keyword}||'%') or
								(lc_area3 like '%'||#{keyword}||'%'
							</when>
						</choose>
					</trim>
				</foreach>
			</trim>
			
		<![CDATA[
					rownum <= #{pageNum} * #{amount}
				)
				where rn > (#{pageNum} -1) * #{amount}
		]]>
				<trim prefix="AND (" suffix=")" prefixOverrides="OR">
					<trim prefix="OR">
						<choose>
							<when test = "lc_type == '육상'">
								lc_type like '%'||#{lc_type}||'%'
							</when>
							<when test = "lc_type == '자전거'">
								lc_type like '%'||#{lc_type}||'%'
							</when>
						</choose>
					</trim>
			</trim>
	</select>
	
	<!-- 게시글 갯수 세기 -->
	<select id="getTotalCount" resultType="int">
		select count(lc_index) from
			( select * from course where 
			<include refid="criteria"></include>
			lc_index like 'lc_%'
			<include refid="type_match"></include>
			)
	</select>
	
	<!-- 좋아요 많은 순서대로 가져오기 -->
	<select id="LC_002_01_good" resultType="vs.lc.lc_002_1.vo.LC_002_1_VO">
		<![CDATA[
			select * from(
				select *
				from (select /*+INDEX_DESC(course lc_index) */
						rownum rn, c.lc_index, c.m_index, c.lc_title, c.lc_type, c.lc_distance, c.lc_run, c.lc_cycle,
						 c.lc_area1, c.lc_area2, c.lc_area3, c.lc_thumbnail, c.lc_text, c.lc_date, c.lc_good, c.lc_see, c.lc_record, m.m_nickname
					from
						course c join member m
					on
						m.m_index = c.m_index)
				where
		]]>
				<include refid="criteria"></include>
		<![CDATA[
				lc_index like 'lc_%'
				order by lc_good desc
			)	
			where rownum <= 4
		]]>
			<include refid="type_match"></include>
	</select>

	<!-- 게시글 업로드 -->
	<insert id="lc_001_01">
		<![CDATA[   
		insert into course(lc_index, m_index, lc_title, lc_type, lc_distance, lc_run, lc_cycle, lc_area1,
			lc_area2, lc_area3, lc_text, lc_date, lc_good, lc_see, lc_record)
		values('lc_'||lpad(seq_course.nextval, 10, '0'), #{m_index}, #{lc_title}, #{lc_type}, #{lc_distance}, #{lc_run},
			#{lc_cycle}, #{lc_area1}, #{lc_area2}, #{lc_area3}, #{lc_text}, sysdate, 0, 0, 0)
			]]>
	</insert> 
	
	<!-- 지도 업로드 -->
	<insert id="lc_001_01_map">
		<selectKey keyProperty="lc_index" order="BEFORE" resultType="String">
		<![CDATA[ 
			select max(lc_index) from course
		]]>	
		</selectKey>
		<![CDATA[ 
			insert into map values(#{lc_index}, #{lc_address}, #{lc_xy_arr})
		]]>	
	</insert>
	
	<!-- 썸네일 업로드 -->
	<update id="lc_001_01_thumbnail" parameterType="java.util.Map">
		<selectKey keyProperty="lc_index" order="BEFORE" resultType="String">
			<![CDATA[ 
				select max(lc_index) from course
			]]>	
		</selectKey>
		<![CDATA[ 
			update course
			set lc_thumbnail = #{lc_thumbnail}
			where lc_index = #{lc_index}
		]]>	
	</update>
	

	<!-- 상세보기 -->	
	<select id="lc_003_01" resultMap="lc_getResult">
	
		<![CDATA[
			select * from (
					select a.lc_index, a.m_index, a.lc_title, a.lc_type, a.lc_distance, a.lc_run, a.lc_cycle, a.lc_area1, a.lc_area2, 
					a.lc_area3, a.lc_thumbnail, a.lc_text, a.lc_date, a.lc_good, a.lc_see, a.lc_record, c.m_nickname 
					from course a join member c
					on c.m_index = a.m_index
					where rownum >= 0
				) d join map b 
				on b.lc_index = d.lc_index
				where d.lc_index = #{lc_index} 
		]]>	
	</select>
	
	<!-- 내용 수정하기 -->
	<update id="lc_003_02">
		<![CDATA[ 
			update course set lc_title=#{lc_title}, lc_type=#{lc_type}, lc_text=#{lc_text} 
			where lc_index = #{lc_index}
		]]>	
	</update>
	
	<!-- 썸네일 수정하기 -->
	<update id="lc_003_02_thumbnail" parameterType="java.util.Map">	
		<![CDATA[ 
			update course
			set lc_thumbnail = #{lc_thumbnail}
			where lc_index = #{lc_index}
		]]>	
	</update>
	
	<!-- 게시글 삭제하기 -->
	<delete id="lc_003_03">
		<![CDATA[ 
			delete from course where lc_index = #{lc_index}
		]]>
	</delete>
	
	<!-- 지도 정보 삭제하기 -->
	<delete id="lc_003_03_map">
		<![CDATA[ 
			delete from map where lc_index = #{lc_index}
		]]>
	</delete>
	
	<!-- 관심코스 등록 여부 확인. -->
	<select id="lc_003_04_search" resultType="java.lang.Integer">
		<![CDATA[ 
			select count(mp_index) from mycourse
			where lc_index = #{lc_index}
			and m_index = #{m_index}
		]]>
	</select>
	
	<!-- 관심코스 등록 -->
	<insert id="lc_003_04">
		<![CDATA[ 
			insert into mycourse values('mp_'||lpad(SEQ_INTEREST.nextval,10,'0'), #{lc_index}, #{m_index})
		]]>
	</insert>
	
	<!--  관심코스 삭제 -->
	<delete id="lc_003_04_delete">
		<![CDATA[ 
			delete from mycourse 
			where lc_index = #{lc_index}
			and m_index = #{m_index}
		]]>
	</delete>
	
	
	
	<!-- ===================================================================================== -->
	<select id="ma_001_1" resultType="MA_001_1_VO">
		<![CDATA[ 
			select * from course
			where lc_area2 = #{lc_area2}
		]]>
	</select>
</mapper>